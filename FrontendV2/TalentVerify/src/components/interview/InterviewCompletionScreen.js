// InterviewCompletionScreen.jsx
import React, { useState } from 'react';
import { Award, Sparkles, CheckCircle, Share, Download, BarChart, ArrowRight, X } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import confetti from 'canvas-confetti';

const InterviewCompletionScreen = ({ evaluationResults = [], userName = "Candidate" }) => {
  const navigate = useNavigate();
  const [showDetailedReport, setShowDetailedReport] = useState(false);

  const calculateAverageScore = () => {
    if (!evaluationResults || evaluationResults.length === 0) return 75;
    const totalMarks = evaluationResults.length * 10; // Each question is out of 10
    const totalScore = evaluationResults.reduce((sum, result) => sum + result.score, 0);
    return Math.round((totalScore / totalMarks) * 100);
  };

  // Simplified confetti effect
  React.useEffect(() => {
    confetti({
      particleCount: 30,
      spread: 50,
      origin: { y: 0.6 },
      colors: ['#5D5FEF', '#4CAF50'],
    });
  }, []);

  const handleShare = () => {
    const score = calculateAverageScore();
    const shareText = `ðŸŽ‰ I just completed an AI-powered interview on TalentVerify and scored ${score}%! Check out this innovative platform for interview preparation. #TalentVerify #InterviewPrep #CareerGrowth`;
    
    if (navigator.share) {
      navigator.share({
        title: 'My Interview Results - TalentVerify',
        text: shareText,
        url: window.location.origin,
      })
      .catch((error) => console.log('Error sharing:', error));
    } else {
      // Fallback for browsers that don't support Web Share API
      const shareUrl = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(window.location.origin)}&summary=${encodeURIComponent(shareText)}`;
      window.open(shareUrl, '_blank');
    }
  };

  const handleDownload = () => {
    const score = calculateAverageScore();
    const feedback = evaluationResults.map((result, index) => 
      `Question ${index + 1}: Score ${result.score}/10\nFeedback: ${result.remarks}\n`
    ).join('\n');

    const reportContent = `
TalentVerify Interview Report
============================
Date: ${new Date().toLocaleDateString()}
Candidate: ${userName}
Overall Score: ${score}%

Detailed Feedback:
-----------------
${feedback}

Areas of Strength:
-----------------
${feedbackHighlights.slice(0, 3).join('\n')}

Recommendations:
---------------
1. Review the feedback for each question
2. Practice similar questions
3. Work on identified areas of improvement
4. Try another interview simulation

Generated by TalentVerify
    `;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `interview-report-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    window.URL.revokeObjectURL(url);
    document.body.removeChild(a);
  };

  // Demo feedback highlights
  const feedbackHighlights = [
    "Strong communication skills demonstrated",
    "Well-structured answers to technical questions",
    "Good balance of confidence and thoughtfulness",
    "Maintained positive facial expressions throughout",
    "Excellent voice tone and clarity"
  ];

  const averageScore = calculateAverageScore();

  const DetailedReportModal = () => (
    <div className="tw-fixed tw-inset-0 tw-bg-black tw-bg-opacity-50 tw-flex tw-items-center tw-justify-center tw-z-50 tw-p-4">
      <div className="tw-bg-white tw-rounded-xl tw-max-w-4xl tw-w-full tw-max-h-[90vh] tw-overflow-y-auto">
        <div className="tw-sticky tw-top-0 tw-bg-white tw-border-b tw-p-4 tw-flex tw-justify-between tw-items-center">
          <h2 className="tw-text-2xl tw-font-bold tw-text-gray-800">Detailed Interview Report</h2>
          <button 
            onClick={() => setShowDetailedReport(false)}
            className="tw-p-2 tw-rounded-full hover:tw-bg-gray-100 tw-transition-colors"
          >
            <X size={24} className="tw-text-gray-500" />
          </button>
        </div>
        
        <div className="tw-p-6">
          {/* Header Info */}
          <div className="tw-mb-8 tw-text-center">
            <h3 className="tw-text-xl tw-font-semibold tw-text-gray-700">Interview Summary</h3>
            <div className="tw-mt-2 tw-text-gray-600">
              <p>Date: {new Date().toLocaleDateString()}</p>
              <p>Candidate: {userName}</p>
              <p className="tw-text-lg tw-font-medium tw-text-indigo-600">Overall Score: {calculateAverageScore()}%</p>
            </div>
          </div>

          {/* Questions and Scores */}
          <div className="tw-space-y-8">
            {evaluationResults.map((result, index) => (
              <div key={index} className="tw-bg-gray-50 tw-rounded-lg tw-p-6">
                <div className="tw-flex tw-justify-between tw-items-start tw-mb-4">
                  <h4 className="tw-text-lg tw-font-medium tw-text-gray-800">Question {index + 1}</h4>
                  <div className="tw-flex tw-items-center">
                    <div className="tw-bg-indigo-100 tw-text-indigo-700 tw-px-3 tw-py-1 tw-rounded-full tw-font-medium">
                      Score: {result.score}/10
                    </div>
                  </div>
                </div>

                {/* Question Section */}
                <div className="tw-mb-4">
                  <h5 className="tw-text-sm tw-font-medium tw-text-gray-600 tw-mb-2">Question:</h5>
                  <div className="tw-bg-white tw-rounded tw-p-3 tw-border tw-border-gray-200">
                    <p className="tw-text-gray-700 tw-whitespace-pre-wrap">{result.question}</p>
                  </div>
                </div>

                {/* Answer Section */}
                <div className="tw-mb-4">
                  <h5 className="tw-text-sm tw-font-medium tw-text-gray-600 tw-mb-2">Your Answer:</h5>
                  <div className="tw-bg-white tw-rounded tw-p-3 tw-border tw-border-gray-200">
                    <p className="tw-text-gray-700 tw-whitespace-pre-wrap">{result.answer}</p>
                  </div>
                </div>

                {/* Feedback Section */}
                <div>
                  <h5 className="tw-text-sm tw-font-medium tw-text-gray-600 tw-mb-2">Feedback:</h5>
                  <div className="tw-bg-white tw-rounded tw-p-3 tw-border tw-border-gray-200">
                    <p className="tw-text-gray-700 tw-whitespace-pre-wrap">{result.remarks}</p>
                  </div>
                </div>
              </div>
            ))}
          </div>

          {/* Score Summary */}
          <div className="tw-mt-8 tw-bg-indigo-50 tw-rounded-lg tw-p-4">
            <h3 className="tw-text-lg tw-font-semibold tw-text-indigo-800 tw-mb-3">Score Summary</h3>
            <div className="tw-grid tw-grid-cols-2 tw-gap-4">
              <div className="tw-bg-white tw-rounded tw-p-3 tw-border tw-border-indigo-100">
                <p className="tw-text-sm tw-text-gray-600">Total Questions</p>
                <p className="tw-text-xl tw-font-semibold tw-text-indigo-600">{evaluationResults.length}</p>
              </div>
              <div className="tw-bg-white tw-rounded tw-p-3 tw-border tw-border-indigo-100">
                <p className="tw-text-sm tw-text-gray-600">Total Marks</p>
                <p className="tw-text-xl tw-font-semibold tw-text-indigo-600">{evaluationResults.length * 10}</p>
              </div>
              <div className="tw-bg-white tw-rounded tw-p-3 tw-border tw-border-indigo-100">
                <p className="tw-text-sm tw-text-gray-600">Marks Obtained</p>
                <p className="tw-text-xl tw-font-semibold tw-text-indigo-600">
                  {evaluationResults.reduce((sum, result) => sum + result.score, 0)}
                </p>
              </div>
              <div className="tw-bg-white tw-rounded tw-p-3 tw-border tw-border-indigo-100">
                <p className="tw-text-sm tw-text-gray-600">Percentage</p>
                <p className="tw-text-xl tw-font-semibold tw-text-indigo-600">{calculateAverageScore()}%</p>
              </div>
            </div>
          </div>

          {/* Recommendations */}
          <div className="tw-mt-8 tw-bg-indigo-50 tw-rounded-lg tw-p-4">
            <h3 className="tw-text-lg tw-font-semibold tw-text-indigo-800 tw-mb-3">Recommendations</h3>
            <ul className="tw-space-y-2">
              <li className="tw-flex tw-items-start">
                <CheckCircle size={18} className="tw-text-indigo-600 tw-mr-2 tw-mt-1" />
                <span className="tw-text-gray-700">Review the feedback for each question to understand areas of improvement</span>
              </li>
              <li className="tw-flex tw-items-start">
                <CheckCircle size={18} className="tw-text-indigo-600 tw-mr-2 tw-mt-1" />
                <span className="tw-text-gray-700">Practice similar questions to strengthen your responses</span>
              </li>
              <li className="tw-flex tw-items-start">
                <CheckCircle size={18} className="tw-text-indigo-600 tw-mr-2 tw-mt-1" />
                <span className="tw-text-gray-700">Work on maintaining consistent eye contact and positive body language</span>
              </li>
              <li className="tw-flex tw-items-start">
                <CheckCircle size={18} className="tw-text-indigo-600 tw-mr-2 tw-mt-1" />
                <span className="tw-text-gray-700">Try another interview simulation to continue building your skills</span>
              </li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );

  return (
    <div className="tw-flex tw-flex-col tw-items-center tw-justify-center tw-min-h-screen tw-bg-gradient-to-br tw-from-indigo-50 tw-to-blue-100 tw-p-6">
      <div className="tw-max-w-4xl tw-w-full tw-bg-white tw-rounded-2xl tw-shadow-xl tw-overflow-hidden tw-transition-all tw-duration-500 hover:tw-shadow-2xl tw-p-8">
        {/* Header with congratulations */}
        <div className="tw-text-center tw-mb-8 tw-relative">
          <div className="tw-absolute tw-inset-0 tw-flex tw-justify-center tw-items-center tw-opacity-5">
            <Award size={200} />
          </div>
          <h1 className="tw-text-3xl tw-font-bold tw-text-indigo-600 tw-mb-2 tw-flex tw-items-center tw-justify-center">
            <Sparkles className="tw-mr-2" size={28} />
            Interview Completed!
            <Sparkles className="tw-ml-2" size={28} />
          </h1>
          <p className="tw-text-lg tw-text-gray-600">
            Thank you for participating in the interview simulation, {userName}!
          </p>
        </div>
        
        {/* Score and summary section */}
        <div className="tw-grid tw-grid-cols-1 md:tw-grid-cols-2 tw-gap-8 tw-mb-8">
          {/* Left side - Score */}
          <div className="tw-flex-1 tw-bg-indigo-50 tw-rounded-xl tw-p-6 tw-text-center tw-flex tw-flex-col tw-items-center tw-justify-center">
            <div className="tw-relative tw-w-40 tw-h-40 tw-mb-4">
              <div className="tw-absolute tw-inset-0 tw-flex tw-items-center tw-justify-center">
                <div className="tw-relative tw-w-36 tw-h-36 tw-rounded-full tw-bg-white tw-flex tw-items-center tw-justify-center tw-shadow-md">
                  <div className="tw-font-bold tw-text-4xl tw-text-indigo-600">{averageScore}%</div>
                </div>
              </div>
              <svg className="tw-w-full tw-h-full tw-transform tw--rotate-90" viewBox="0 0 100 100">
                <circle 
                  cx="50" cy="50" r="45" 
                  fill="none" 
                  stroke="#e6e6e6" 
                  strokeWidth="10"
                />
                <circle 
                  cx="50" cy="50" r="45" 
                  fill="none" 
                  stroke="#5D5FEF" 
                  strokeWidth="10"
                  strokeDasharray="283"
                  strokeDashoffset={283 - (283 * averageScore / 100)}
                />
              </svg>
            </div>
            <h3 className="tw-text-xl tw-font-semibold tw-text-gray-700">Overall Score</h3>
          </div>
          
          {/* Right side - Feedback */}
          <div className="tw-flex-1 tw-bg-white tw-rounded-xl tw-p-6">
            <h3 className="tw-text-xl tw-font-semibold tw-text-gray-700 tw-mb-4 tw-flex tw-items-center">
              <CheckCircle size={20} className="tw-text-green-500 tw-mr-2" />
              Feedback Highlights
            </h3>
            <ul className="tw-space-y-3">
              {feedbackHighlights.map((feedback, index) => (
                <li key={index} className="tw-flex tw-items-start">
                  <div className="tw-h-6 tw-w-6 tw-rounded-full tw-bg-green-100 tw-flex tw-items-center tw-justify-center tw-text-green-600 tw-font-medium tw-mr-3 tw-mt-0.5">
                    {index + 1}
                  </div>
                  <p className="tw-text-gray-600">{feedback}</p>
                </li>
              ))}
            </ul>
          </div>
        </div>
        
        {/* Action buttons */}
        <div className="tw-flex tw-flex-wrap tw-gap-4 tw-justify-center tw-mb-8">
          <button 
            onClick={() => setShowDetailedReport(true)}
            className="tw-group tw-flex tw-items-center tw-bg-indigo-600 tw-text-white tw-px-6 tw-py-3 tw-rounded-lg tw-font-medium tw-transition-all hover:tw-bg-indigo-700"
          >
            <BarChart size={18} className="tw-mr-2 tw-transition-transform group-hover:tw-scale-110" />
            View Detailed Report
          </button>
          <button 
            onClick={handleDownload}
            className="tw-group tw-flex tw-items-center tw-bg-white tw-border tw-border-indigo-600 tw-text-indigo-600 tw-px-6 tw-py-3 tw-rounded-lg tw-font-medium tw-transition-all hover:tw-bg-indigo-50"
          >
            <Download size={18} className="tw-mr-2 tw-transition-transform group-hover:tw-scale-110" />
            Download Results
          </button>
          <button 
            onClick={handleShare}
            className="tw-group tw-flex tw-items-center tw-bg-white tw-border tw-border-gray-300 tw-text-gray-600 tw-px-6 tw-py-3 tw-rounded-lg tw-font-medium tw-transition-all hover:tw-bg-gray-50"
          >
            <Share size={18} className="tw-mr-2 tw-transition-transform group-hover:tw-scale-110" />
            Share Results
          </button>
        </div>
        
        {/* Employer notification */}
        <div className="tw-mb-8 tw-p-6 tw-bg-green-50 tw-rounded-xl tw-border tw-border-green-100">
          <div className="tw-flex tw-items-start">
            <CheckCircle size={24} className="tw-text-green-500 tw-mr-3 tw-mt-1" />
            <div>
              <h3 className="tw-text-lg tw-font-semibold tw-text-green-800 tw-mb-2">Results Shared with Employer</h3>
              <p className="tw-text-green-700">
                Your interview results have been automatically shared with the employer. They will review your performance and get back to you soon.
              </p>
            </div>
          </div>
        </div>
        
        {/* Next steps */}
        <div className="tw-mt-10 tw-text-center tw-p-6 tw-bg-gray-50 tw-rounded-xl">
          <h3 className="tw-text-lg tw-font-semibold tw-text-gray-700 tw-mb-2">Next Steps</h3>
          <p className="tw-text-gray-600 tw-mb-4">
            Review your feedback, practice areas for improvement, and feel free to try another interview simulation to continue building your skills!
          </p>
          <button 
            onClick={() => navigate('/dashboards/intervieweeSearch')}
            className="tw-group tw-flex tw-items-center tw-justify-center tw-bg-indigo-600 tw-text-white tw-px-6 tw-py-3 tw-rounded-lg tw-font-medium tw-transition-all hover:tw-bg-indigo-700 tw-mx-auto"
          >
            Browse More Interviews
            <ArrowRight size={18} className="tw-ml-2 tw-transition-transform group-hover:tw-translate-x-1" />
          </button>
        </div>
      </div>

      {/* Modal */}
      {showDetailedReport && <DetailedReportModal />}
    </div>
  );
};

export default InterviewCompletionScreen;